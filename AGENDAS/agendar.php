<?php
session_start(); // Inicia a sess√£o para identificar o usu√°rio logado

// Verifica se o usu√°rio est√° logado
if (!isset($_SESSION["usuario_id"])) {
    die("Acesso negado. Fa√ßa login primeiro.");
}

// Conex√£o com o banco de dados MySQL
$conn = new mysqli("localhost:3306", "root", "", "agenda_etec");
if ($conn->connect_error) {
    die("Falha na conex√£o: " . $conn->connect_error);
}

// Se o formul√°rio foi enviado via POST
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    // Pega os dados enviados do formul√°rio
    $id_sala = $_POST["id_sala"];
    $data_reserva = $_POST["data_reserva"];
    $hora_inicio = $_POST["hora_inicio"];
    $hora_fim = $_POST["hora_fim"];
    $id_usuario = $_SESSION["usuario_id"];

    // üîí Valida√ß√£o 1: hor√°rio no formato correto (HH:MM)
    if (!preg_match("/^\d{2}:\d{2}$/", $hora_inicio) || !preg_match("/^\d{2}:\d{2}$/", $hora_fim)) {
        die("Hor√°rio inv√°lido.");
    }

    // Converte para timestamps para facilitar compara√ß√£o
    $inicio = strtotime($hora_inicio);
    $fim = strtotime($hora_fim);

    // üîí Valida√ß√£o 2: intervalo permitido (08:00‚Äì22:00)
    $limite_inicio = strtotime("08:00");
    $limite_fim = strtotime("22:00");
    if ($inicio < $limite_inicio || $fim > $limite_fim || $fim <= $inicio) {
        die("Erro: Reservas s√≥ podem ser feitas das 08:00 √†s 22:00, com hor√°rio final maior que o inicial.");
    }

    // üîí Valida√ß√£o 3: deve ser m√∫ltiplo de 30 minutos
    if (date("i", $inicio) % 30 != 0 || date("i", $fim) % 30 != 0) {
        die("Erro: Reservas s√≥ podem ser feitas em intervalos de 30 minutos (ex: 08:00, 08:30, 09:00...).");
    }

    // Verifica se j√° existe reserva que conflita com a escolhida
    $verifica = $conn->prepare("SELECT * FROM reservas 
        WHERE id_sala = ? AND data_reserva = ? 
        AND (
            (hora_inicio < ? AND hora_fim > ?) OR  -- in√≠cio antes e t√©rmino depois
            (hora_inicio < ? AND hora_fim > ?) OR  -- t√©rmino depois do in√≠cio
            (hora_inicio >= ? AND hora_fim <= ?)   -- dentro do intervalo j√° reservado
        )");

    // Substitui os "?" pelos valores
    $verifica->bind_param("isssssss", 
        $id_sala, $data_reserva, 
        $hora_fim, $hora_fim, 
        $hora_inicio, $hora_inicio, 
        $hora_inicio, $hora_fim
    );
    $verifica->execute();
    $resultado = $verifica->get_result();

    // Se encontrou conflito -> n√£o deixa reservar
    if ($resultado->num_rows > 0) {
        echo "Erro: J√° existe uma reserva para essa sala nesse hor√°rio.";
    } else {
        // Se n√£o existe conflito -> insere a reserva no banco
        $stmt = $conn->prepare("INSERT INTO reservas (id_sala, id_usuario, data_reserva, hora_inicio, hora_fim) 
                VALUES (?, ?, ?, ?, ?)");
        $stmt->bind_param("iisss", $id_sala, $id_usuario, $data_reserva, $hora_inicio, $hora_fim);

        if ($stmt->execute()) {
            echo "Reserva feita com sucesso!";
        } else {
            echo "Erro ao agendar: " . $stmt->error;
        }

        $stmt->close();
    }

    $verifica->close();
} else {
    echo "Acesso inv√°lido.";
}

$conn->close(); // Fecha a conex√£o
?>
